package templates

type ModeInfo struct {
	ID          string
	Name        string
	Icon        string
	Description string
	Duration    string
	Cognitive   string
}

templ Home() {
	@Layout("DevSmith Review - Code Analysis") {
		<!-- Hero Section -->
		<section class="bg-gradient-to-r from-indigo-600 to-blue-600 dark:from-indigo-900 dark:to-blue-900 text-white py-12 px-4 sm:px-6 lg:px-8">
			<div class="max-w-7xl mx-auto">
				<h1 class="text-3xl sm:text-4xl font-bold mb-2">üîç DevSmith Review</h1>
				<p class="text-lg opacity-90">AI-powered code analysis with 5 reading modes</p>
			</div>
		</section>

		<!-- Main Content -->
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
			@ModeSelector()
			@SessionForm()
			<!-- Loading indicator for HTMX (hidden by default) -->
			<div id="progress-indicator-container" class="htmx-indicator mt-12 flex items-center gap-3 justify-center p-4 bg-blue-50 dark:bg-blue-900 rounded-lg">
				<span class="loading loading-spinner loading-lg text-blue-600 dark:text-blue-400"></span>
				<span class="text-sm font-medium text-blue-900 dark:text-blue-100">Analyzing your code...</span>
			</div>
			<!-- Reading Mode Display -->
			<div id="reading-mode-demo" class="mt-12 space-y-12">
				<!-- Preview Mode Example -->
				<section>
					<h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Preview Mode Example</h3>
					@PreviewModeResult("File tree and summary output here (mock)")
				</section>
				<!-- Skim Mode Example -->
				<section>
					<h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Skim Mode Example</h3>
					@SkimModeFunctionList([]string{"GetUser", "CreateUser", "DeleteUser"})
				</section>
				<!-- Scan Mode Example -->
				<section>
					<h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Scan Mode Example</h3>
					@ScanModeSearch()
				</section>
				<!-- Detailed Mode Example -->
				<section>
					<h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Detailed Mode Example</h3>
					@DetailedModeLineByLine([]string{"func GetUser(id int) {", "  // ...", "}"})
				</section>
				<!-- Critical Mode Example -->
				<section>
					<h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Critical Mode Example</h3>
					@CriticalModeIssueList([]CriticalModeIssue{
						{Description: "Handler calls DB directly (layer violation)", Severity: "Critical"},
						{Description: "SQL injection risk", Severity: "Critical"},
						{Description: "Missing error handling", Severity: "Important"},
					})
				</section>
			</div>
		</div>
	}
}

templ ModeSelector() {
	<section class="mb-12">
		<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-8">Choose Your Reading Mode</h2>
		<div class="grid gap-6 md:grid-cols-2 lg:grid-cols-5">
			@ModeCard(ModeInfo{
				ID:          "preview",
				Name:        "Preview",
				Icon:        "üëÅÔ∏è",
				Description: "Quick 2-minute overview of project structure and purpose",
				Duration:    "2-3 min",
				Cognitive:   "Low",
			})

			@ModeCard(ModeInfo{
				ID:          "skim",
				Name:        "Skim",
				Icon:        "‚ö°",
				Description: "Surface-level scan of architecture and key components",
				Duration:    "5-7 min",
				Cognitive:   "Low-Medium",
			})

			@ModeCard(ModeInfo{
				ID:          "scan",
				Name:        "Scan",
				Icon:        "üîé",
				Description: "Targeted search for specific patterns or issues",
				Duration:    "3-5 min",
				Cognitive:   "Medium",
			})

			@ModeCard(ModeInfo{
				ID:          "detailed",
				Name:        "Detailed",
				Icon:        "üìñ",
				Description: "Deep dive into implementation details and logic",
				Duration:    "10-15 min",
				Cognitive:   "High",
			})

			@ModeCard(ModeInfo{
				ID:          "critical",
				Name:        "Critical",
				Icon:        "üî¨",
				Description: "Comprehensive review focusing on correctness and quality",
				Duration:    "15-20 min",
				Cognitive:   "Very High",
			})
		</div>
	</section>
}

templ ModeCard(mode ModeInfo) {
	<div class="mode-card group" role="region" aria-label={ mode.Name + " mode" }>
		<div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 hover:shadow-lg hover:border-indigo-300 dark:hover:border-indigo-600 transition-all">
			<div class="text-4xl mb-4">{ mode.Icon }</div>
			<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">{ mode.Name }</h3>
			<p class="text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">{ mode.Description }</p>
			<div class="space-y-2 mb-4">
				<div class="flex items-center text-xs text-gray-500 dark:text-gray-400">
					<span>‚è±Ô∏è { mode.Duration }</span>
				</div>
				<div class="flex items-center text-xs">
					<span class={ "px-2 py-1 rounded-full " + cognitiveBadgeClass(mode.Cognitive) }>
						üß† { mode.Cognitive }
					</span>
				</div>
			</div>
			<button 
				class="w-full px-4 py-2 rounded-lg font-medium bg-indigo-600 text-white hover:bg-indigo-700 dark:bg-indigo-700 dark:hover:bg-indigo-800 transition-colors"
				hx-post={ "/api/review/modes/" + mode.ID }
				hx-target="#reading-mode-demo"
				hx-swap="innerHTML"
				hx-include="[name='pasted_code'], [name='github_url'], [name='file']"
				hx-indicator="#progress-indicator-container"
				aria-label={ "Analyze code with " + mode.Name + " mode" }>
				Select { mode.Name }
			</button>
		</div>
	</div>
}

templ RepoInput() {
	<div id="repo-input-section" class="repo-input-section hidden">
		<h2>Repository Details</h2>
		<form id="review-form">
			<div class="form-group">
				<label for="repository-url">Repository URL</label>
				<input
					type="url"
					id="repository-url"
					name="repository_url"
					placeholder="https://github.com/user/repo"
					required
				/>
				<span class="form-help">Only GitHub repositories are supported in MVP</span>
			</div>

			<div class="form-row">
				<div class="form-group">
					<label for="branch">Branch</label>
					<input
						type="text"
						id="branch"
						name="branch"
						placeholder="main"
						value="main"
					/>
				</div>

				<div class="form-group">
					<label for="commit-sha">Commit SHA (optional)</label>
					<input
						type="text"
						id="commit-sha"
						name="commit_sha"
						placeholder="abc123..."
					/>
				</div>
			</div>

			<input type="hidden" id="selected-mode" name="mode"/>

			<div class="form-actions">
				<button type="button" id="back-btn" class="btn-secondary">‚Üê Back to Modes</button>
				<button type="submit" id="analyze-btn" class="btn-primary">Start Analysis</button>
			</div>
		</form>
	</div>
}

func cognitiveBadgeClass(cognitive string) string {
	switch cognitive {
	case "Low":
		return "bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200"
	case "Low-Medium":
		return "bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200"
	case "Medium":
		return "bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200"
	case "High":
		return "bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200"
	case "Very High":
		return "bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200"
	default:
		return "bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200"
	}
}

// Mode Result Components for HTMX responses
type PreviewResult struct {
	FileTree              []string
	BoundedContexts       []string
	TechStack             []string
	ArchitecturePattern   string
	EntryPoints           []string
	ExternalDependencies  []string
	Summary               string
}

templ PreviewModeHtmxResponse(result PreviewResult) {
	<section class="card">
		<h3 class="text-xl font-bold mb-4">üëÅÔ∏è Preview Mode Results</h3>
		<div class="space-y-4">
			<div>
				<h4 class="font-semibold text-gray-700 dark:text-gray-300">File Tree</h4>
				<ul class="list-disc list-inside text-sm text-gray-600 dark:text-gray-400">
					for _, file := range result.FileTree {
						<li>{ file }</li>
					}
					if len(result.FileTree) == 0 {
						<li>N/A</li>
					}
				</ul>
			</div>
			<div>
				<h4 class="font-semibold text-gray-700 dark:text-gray-300">Bounded Contexts</h4>
				<ul class="list-disc list-inside text-sm text-gray-600 dark:text-gray-400">
					for _, ctx := range result.BoundedContexts {
						<li>{ ctx }</li>
					}
					if len(result.BoundedContexts) == 0 {
						<li>N/A</li>
					}
				</ul>
			</div>
			<div>
				<h4 class="font-semibold text-gray-700 dark:text-gray-300">Tech Stack</h4>
				<div class="flex gap-2 flex-wrap">
					for _, tech := range result.TechStack {
						<span class="px-3 py-1 bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200 rounded-full text-sm font-medium">{ tech }</span>
					}
					if len(result.TechStack) == 0 {
						<span class="text-gray-500">N/A</span>
					}
				</div>
			</div>
			<div>
				<h4 class="font-semibold text-gray-700 dark:text-gray-300">Architecture Pattern</h4>
				<p class="text-sm text-gray-600 dark:text-gray-400">{ result.ArchitecturePattern }</p>
			</div>
			<div>
				<h4 class="font-semibold text-gray-700 dark:text-gray-300">Summary</h4>
				<p class="text-sm text-gray-600 dark:text-gray-400">{ result.Summary }</p>
			</div>
		</div>
	</section>
}
