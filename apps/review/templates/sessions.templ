package review_templates

import (
	"fmt"
	"strings"
	"time"

	review_models "github.com/mikejsmith1985/devsmith-modular-platform/internal/review/models"
)

// SessionsList renders the sessions list view with filtering and pagination.
templ SessionsList(sessions []*review_models.SessionSummary, limit, offset int, total int) {
	<div class="sessions-container">
		<header class="sessions-header">
			<h1>📋 Code Review Sessions</h1>
			<p class="subtitle">Manage your code review sessions</p>
			<div class="session-controls">
				<button hx-get="/review/sessions/new" hx-target="main" class="btn-primary">
					<span class="mr-2">➕</span> New Session
				</button>
			</div>
		</header>

		<main class="sessions-main">
			<!-- Filter bar with HTMX -->
			<form hx-get="/api/review/sessions" hx-target=".sessions-grid" hx-trigger="change" class="filter-bar">
				<div class="filter-group">
					<label for="status-filter">Status:</label>
					<select id="status-filter" name="status" class="filter-select">
						<option value="">All Statuses</option>
						<option value="active">Active</option>
						<option value="completed">Completed</option>
						<option value="archived">Archived</option>
					</select>
				</div>
				<div class="filter-group">
					<label for="language-filter">Language:</label>
					<select id="language-filter" name="language" class="filter-select">
						<option value="">All Languages</option>
						<option value="go">Go</option>
						<option value="python">Python</option>
						<option value="javascript">JavaScript</option>
						<option value="rust">Rust</option>
						<option value="java">Java</option>
					</select>
				</div>
			</form>

			<!-- Sessions grid -->
			if len(sessions) == 0 {
				<div class="empty-state">
					<p>📭 No sessions yet</p>
					<p class="text-gray-600 dark:text-gray-400">Create a new session to get started</p>
				</div>
			} else {
				<div class="sessions-grid">
					for _, session := range sessions {
						@SessionCard(session)
					}
				</div>

				<!-- Pagination with HTMX -->
				<div class="pagination">
					if offset > 0 {
						<button hx-get={ fmt.Sprintf("/api/review/sessions?limit=%d&offset=%d", limit, offset-limit) } 
						        hx-target=".sessions-grid" class="btn-secondary">
							← Previous
						</button>
					}
					<span class="page-info">
						Showing { fmt.Sprintf("%d", offset+1) }-{ fmt.Sprintf("%d", offset+len(sessions)) } of { fmt.Sprintf("%d", total) }
					</span>
					if offset+limit < total {
						<button hx-get={ fmt.Sprintf("/api/review/sessions?limit=%d&offset=%d", limit, offset+limit) } 
						        hx-target=".sessions-grid" class="btn-secondary">
							Next →
						</button>
					}
				</div>
			}
		</main>
	</div>
}

// SessionCard renders a single session summary card.
templ SessionCard(session *review_models.SessionSummary) {
	<div class="session-card" hx-get={ fmt.Sprintf("/review/sessions/%d", session.ID) } hx-target="main" hx-push-url="true">
		<div class="session-header">
			<h3 class="session-title">{ session.Title }</h3>
			<span class={ "status-badge", session.Status }>{ session.Status }</span>
		</div>

		<div class="session-details">
			<div class="detail-row">
				<span class="label">Language:</span>
				<span class="value">{ session.Language }</span>
			</div>
			<div class="detail-row">
				<span class="label">Source:</span>
				<span class="value">{ session.CodeSource }</span>
			</div>
			<div class="detail-row">
				<span class="label">Mode:</span>
				<span class="value">{ session.CurrentMode }</span>
			</div>
		</div>

		<!-- Mode progress bar -->
		<div class="progress-section">
			<div class="progress-label">
				<span>Progress</span>
				<span>{ fmt.Sprintf("%d", session.ModeProgress) }%</span>
			</div>
			<div class="progress-bar">
				<div class="progress-fill" style={ templ.SafeCSS("width", fmt.Sprintf("%d%%", session.ModeProgress)) }></div>
			</div>
		</div>

		<div class="session-footer">
			<div class="time-info">
				<span class="text-sm text-gray-600 dark:text-gray-400">
					Created: { session.CreatedAt.Format("Jan 2, 2006") }
				</span>
			</div>
			<div class="session-actions">
				<button class="btn-icon" title="View details" 
				        hx-get={ fmt.Sprintf("/review/sessions/%d", session.ID) } 
				        hx-target="main" hx-push-url="true"
				        onclick="event.stopPropagation()">
					👁️
				</button>
				<button class="btn-icon" title="Delete session" 
				        hx-delete={ fmt.Sprintf("/api/review/sessions/%d", session.ID) } 
				        hx-confirm="Are you sure?"
				        hx-target=".sessions-grid" hx-swap="outerHTML swap:1s"
				        onclick="event.stopPropagation()">
					🗑️
				</button>
			</div>
		</div>
	</div>
}

// SessionDetail renders the detailed session view with mode tabs.
templ SessionDetail(session *review_models.CodeReviewSession) {
	<div class="session-detail-container">
		<header class="session-detail-header">
			<button hx-get="/review/sessions" hx-target="main" hx-push-url="/review/sessions" class="btn-back">← Back</button>
			<div class="header-content">
				<h1>{ session.Title }</h1>
				<p class="session-subtitle">{ session.Description }</p>
			</div>
		</header>

		<main class="session-detail-main">
			<!-- Session info bar -->
			<div class="info-bar">
				<div class="info-item">
					<span class="label">Status:</span>
					<span class="value">{ session.Status }</span>
				</div>
				<div class="info-item">
					<span class="label">Language:</span>
					<span class="value">{ session.Language }</span>
				</div>
				<div class="info-item">
					<span class="label">Created:</span>
					<span class="value">{ session.CreatedAt.Format("Jan 2 15:04") }</span>
				</div>
				<div class="info-item">
					<span class="label">Last Accessed:</span>
					<span class="value">{ session.LastAccessedAt.Format("Jan 2 15:04") }</span>
				</div>
			</div>

			<!-- Mode tabs with HTMX for switching -->
			<div class="mode-tabs">
				<button class="tab-button active" data-mode="preview" 
				        hx-get={ fmt.Sprintf("/review/sessions/%d/modes/preview", session.ID) } 
				        hx-target=".mode-content" hx-swap="innerHTML">
					🔍 Preview
				</button>
				<button class="tab-button" data-mode="skim" 
				        hx-get={ fmt.Sprintf("/review/sessions/%d/modes/skim", session.ID) } 
				        hx-target=".mode-content" hx-swap="innerHTML">
					📄 Skim
				</button>
				<button class="tab-button" data-mode="scan" 
				        hx-get={ fmt.Sprintf("/review/sessions/%d/modes/scan", session.ID) } 
				        hx-target=".mode-content" hx-swap="innerHTML">
					🔎 Scan
				</button>
				<button class="tab-button" data-mode="detailed" 
				        hx-get={ fmt.Sprintf("/review/sessions/%d/modes/detailed", session.ID) } 
				        hx-target=".mode-content" hx-swap="innerHTML">
					📋 Detailed
				</button>
				<button class="tab-button" data-mode="critical" 
				        hx-get={ fmt.Sprintf("/review/sessions/%d/modes/critical", session.ID) } 
				        hx-target=".mode-content" hx-swap="innerHTML">
					⚡ Critical
				</button>
			</div>

			<!-- Mode content area (loaded via HTMX) -->
			<div class="mode-content">
				if len(session.ModeStates) > 0 {
					for mode, modeState := range session.ModeStates {
						if mode == "preview" {
							@ModeStateView(mode, modeState, session.ID)
						}
					}
				}
			</div>

			<!-- Session history section -->
			<div class="history-section">
				<h2>Session History</h2>
				<button class="btn-secondary" 
				        hx-get={ fmt.Sprintf("/review/sessions/%d/history", session.ID) } 
				        hx-target="main" hx-push-url="true">
					📊 View Full History
				</button>
			</div>
		</main>
	</div>
}

// ModeStateView renders the state and results for a specific mode.
templ ModeStateView(mode string, state review_models.ModeState, sessionID int64) {
	<div class="mode-state">
		<div class="mode-status">
			<div class="status-line">
				<span class="label">Status:</span>
				<span class={ "status-badge", state.Status }>{ state.Status }</span>
			</div>
			if state.IsCompleted {
				<div class="status-line">
					<span class="label">✓ Completed</span>
				</div>
			}
			if state.QualityScore > 0 {
				<div class="status-line">
					<span class="label">Quality Score:</span>
					<span class="quality-score">{ fmt.Sprintf("%d/100", state.QualityScore) }</span>
				</div>
			}
			if state.IssuesFound > 0 {
				<div class="status-line">
					<span class="label">Issues Found:</span>
					<span class="issue-count">{ fmt.Sprintf("%d", state.IssuesFound) }</span>
				</div>
			}
		</div>

		if state.UserNotes != "" {
			<div class="mode-notes">
				<h4>Notes</h4>
				<p>{ state.UserNotes }</p>
			</div>
		}

		if state.LastError != "" {
			<div class="mode-error">
				<h4>⚠️ Error</h4>
				<p>{ state.LastError }</p>
			</div>
		}

		<div class="mode-actions">
			<button class="btn-secondary" 
			        hx-post={ fmt.Sprintf("/api/review/sessions/%d/modes/%s", sessionID, mode) } 
			        hx-vals='{"status": "in_progress"}'
			        hx-target=".mode-state" hx-swap="outerHTML">
				▶️ Run { strings.Title(mode) }
			</button>
			<button class="btn-secondary" 
			        hx-get={ fmt.Sprintf("/review/sessions/%d/modes/%s/note", sessionID, mode) } 
			        hx-target=".mode-state" hx-swap="afterbegin">
				📝 Add Note
			</button>
		</div>
	</div>
}

// SessionHistory renders the audit trail for a session.
templ SessionHistory(history []*review_models.SessionHistory) {
	<div class="history-container">
		<header class="history-header">
			<button hx-get="/review/sessions" hx-target="main" hx-push-url="/review/sessions" class="btn-back">← Back</button>
			<h1>Session History</h1>
		</header>

		<main class="history-main">
			if len(history) == 0 {
				<div class="empty-state">
					<p>No history available</p>
				</div>
			} else {
				<div class="history-timeline">
					for _, entry := range history {
						@HistoryEntry(entry)
					}
				</div>
			}
		</main>
	</div>
}

// HistoryEntry renders a single history entry.
templ HistoryEntry(entry *review_models.SessionHistory) {
	<div class="history-entry">
		<div class="entry-time">
			<span class="timestamp">{ entry.CreatedAt.Format("15:04:05") }</span>
			<span class="date">{ entry.CreatedAt.Format("Jan 2") }</span>
		</div>
		<div class="entry-content">
			<div class="action-badge">{ entry.Action }</div>
			<p class="action-description">{ entry.ChangeSummary }</p>
			if entry.ActedByID > 0 {
				<p class="actor-info">by User #{ fmt.Sprintf("%d", entry.ActedByID) }</p>
			}
		</div>
	</div>
}
