package templates

type PreviewFileNodeData struct {
	Name        string
	Description string
	Children    []PreviewFileNodeData
}

templ PreviewMode(
	fileTree []PreviewFileNodeData,
	boundedContexts []string,
	techStack []string,
	architecturePattern string,
	entryPoints []string,
	externalDependencies []string,
	summary string,
	sessionID string,
) {
	<div class="preview-mode-container p-6">
		<h2 class="text-2xl font-bold mb-4">Preview Mode</h2>
		<div class="flex gap-8">
			<!-- File Tree -->
			<div class="w-1/2">
				<h3 class="text-lg font-semibold mb-2">File/Folder Tree</h3>
				<div id="file-tree">
					for _, node := range fileTree {
						@PreviewFileNode(node)
					}
				</div>
			</div>
			<!-- AI Summary Panel -->
			<div class="w-1/2">
				<h3 class="text-lg font-semibold mb-2">AI Summary</h3>
				<div class="bg-gray-100 dark:bg-gray-800 p-4 rounded shadow">
					<p class="mb-2"><strong>Bounded Contexts:</strong> { stringArrayToString(boundedContexts) }</p>
					<p class="mb-2"><strong>Tech Stack:</strong> { stringArrayToString(techStack) }</p>
					<p class="mb-2"><strong>Architecture:</strong> { architecturePattern }</p>
					<p class="mb-2"><strong>Entry Points:</strong> { stringArrayToString(entryPoints) }</p>
					<p class="mb-2"><strong>External Dependencies:</strong> { stringArrayToString(externalDependencies) }</p>
					<p class="mt-4 text-sm text-gray-700 dark:text-gray-300">{ summary }</p>
				</div>
				<!-- Filter by file type -->
				<div class="mt-4">
					<label for="file-type-filter" class="mr-2">Filter by file type:</label>
					<select id="file-type-filter" hx-get={ "/api/review/sessions/" + sessionID + "/analyze" } hx-params="reading_mode=preview" hx-target="#file-tree" hx-swap="outerHTML">
						<option value="all">All</option>
						<option value="go">.go</option>
						<option value="templ">.templ</option>
						<option value="sql">.sql</option>
					</select>
				</div>
			</div>
		</div>
	</div>
}

templ PreviewFileNode(node PreviewFileNodeData) {
	<div class="ml-4 border-l-2 pl-2 mb-2">
		<span class="font-mono text-blue-600 dark:text-blue-400">{ node.Name }</span>
		<span class="text-xs text-gray-500 ml-2">{ node.Description }</span>
		if len(node.Children) > 0 {
			<div>
				for _, child := range node.Children {
					@PreviewFileNode(child)
				}
			</div>
		}
	</div>
}

// Helper function to convert string array to comma-separated string
func stringArrayToString(arr []string) string {
	if len(arr) == 0 {
		return ""
	}
	result := ""
	for i, v := range arr {
		if i > 0 {
			result += ", "
		}
		result += v
	}
	return result
}
