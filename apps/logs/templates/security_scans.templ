package templates

import "fmt"

// SecurityScansTab renders the security scans tab
templ SecurityScansTab() {
	<div class="tab-pane fade" id="health-security" role="tabpanel">
		<div class="container mx-auto p-6">
			<!-- Header -->
			<div class="mb-6">
				<h2 class="text-2xl font-bold mb-2">Security Scans</h2>
				<p class="text-gray-600">Trivy vulnerability scanning results across all services</p>
			</div>

			<!-- Quick Stats -->
			<div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
				<div class="stat bg-error text-error-content shadow-xl rounded-lg">
					<div class="stat-title">Critical</div>
					<div class="stat-value" id="critical-count">0</div>
					<div class="stat-desc">Immediate action required</div>
				</div>
				<div class="stat bg-warning text-warning-content shadow-xl rounded-lg">
					<div class="stat-title">High</div>
					<div class="stat-value" id="high-count">0</div>
					<div class="stat-desc">Should be addressed</div>
				</div>
				<div class="stat bg-info text-info-content shadow-xl rounded-lg">
					<div class="stat-title">Medium</div>
					<div class="stat-value" id="medium-count">0</div>
					<div class="stat-desc">Consider fixing</div>
				</div>
				<div class="stat bg-success text-success-content shadow-xl rounded-lg">
					<div class="stat-title">Low</div>
					<div class="stat-value" id="low-count">0</div>
					<div class="stat-desc">Monitor</div>
				</div>
			</div>

			<!-- Vulnerability Heatmap -->
			<div class="card bg-base-100 shadow-xl mb-6">
				<div class="card-body">
					<h3 class="card-title mb-4">Vulnerability Heatmap</h3>
					<div id="vuln-heatmap" class="overflow-x-auto">
						<table class="table table-compact w-full">
							<thead>
								<tr>
									<th>Service</th>
									<th>Critical</th>
									<th>High</th>
									<th>Medium</th>
									<th>Low</th>
									<th>Total</th>
									<th>Status</th>
								</tr>
							</thead>
							<tbody id="heatmap-body">
								<!-- Dynamically populated -->
							</tbody>
						</table>
					</div>
				</div>
			</div>

			<!-- Recent Scans -->
			<div class="card bg-base-100 shadow-xl mb-6">
				<div class="card-body">
					<div class="flex justify-between items-center mb-4">
						<h3 class="card-title">Recent Scans</h3>
						<button 
							class="btn btn-sm btn-primary" 
							hx-post="/api/security/scans/trigger" 
							hx-confirm="Trigger security scan now?"
							hx-target="#scans-list"
						>
							Scan Now
						</button>
					</div>
					<div id="scans-list" hx-get="/api/security/scans?limit=20" hx-trigger="load">
						<!-- Dynamically loaded -->
					</div>
				</div>
			</div>

			<!-- Vulnerability Details -->
			<div class="card bg-base-100 shadow-xl">
				<div class="card-body">
					<h3 class="card-title mb-4">Vulnerability Details</h3>
					<div class="tabs tabs-bordered mb-4">
						<input type="radio" name="vuln_tabs" class="tab" aria-label="CRITICAL" />
						<div class="tab-content p-4 bg-base-100">
							<div id="critical-vulns" class="space-y-3">
								<!-- Dynamically populated -->
							</div>
						</div>

						<input type="radio" name="vuln_tabs" class="tab" aria-label="HIGH" checked />
						<div class="tab-content p-4 bg-base-100">
							<div id="high-vulns" class="space-y-3">
								<!-- Dynamically populated -->
							</div>
						</div>

						<input type="radio" name="vuln_tabs" class="tab" aria-label="MEDIUM" />
						<div class="tab-content p-4 bg-base-100">
							<div id="medium-vulns" class="space-y-3">
								<!-- Dynamically populated -->
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

// VulnerabilityItem renders a single vulnerability
templ VulnerabilityItem(id string, severity string, title string, pkg string) {
	<div class="alert alert-warning">
		<div class="flex gap-4">
			<div class="flex-1">
				<p class="font-mono text-sm font-semibold">{ id }</p>
				<p class="text-sm">{ title }</p>
				if pkg != "" {
					<p class="text-xs text-gray-500">Package: { pkg }</p>
				}
			</div>
			<div class="flex gap-2">
				<span class={ "badge", severityBadgeClass(severity) }>
					{ severity }
				</span>
			</div>
		</div>
	</div>
}

// severityBadgeClass returns the appropriate DaisyUI badge class
func severityBadgeClass(severity string) string {
	switch severity {
	case "CRITICAL":
		return "badge-error"
	case "HIGH":
		return "badge-warning"
	case "MEDIUM":
		return "badge-info"
	case "LOW":
		return "badge-success"
	default:
		return "badge"
	}
}

// ScanResultRow renders a scan result summary
templ ScanResultRow(target string, critical int, high int, medium int, low int, timestamp string) {
	<div class="flex justify-between items-center border-b pb-4 mb-4">
		<div class="flex-1">
			<p class="font-semibold">{ target }</p>
			<p class="text-xs text-gray-500">{ timestamp }</p>
		</div>
		<div class="flex gap-6">
			if critical > 0 {
				<div class="text-center">
					<span class="badge badge-error font-bold">{ fmt.Sprintf("%d", critical) }</span>
					<p class="text-xs text-gray-500">Critical</p>
				</div>
			}
			if high > 0 {
				<div class="text-center">
					<span class="badge badge-warning font-bold">{ fmt.Sprintf("%d", high) }</span>
					<p class="text-xs text-gray-500">High</p>
				</div>
			}
			<div class="text-center">
				<span class="badge badge-ghost">{ fmt.Sprintf("%d", medium + low) }</span>
				<p class="text-xs text-gray-500">Other</p>
			</div>
		</div>
		<button class="btn btn-xs btn-ghost">View Details</button>
	</div>
}
