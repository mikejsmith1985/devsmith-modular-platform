// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package button

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import (
	"github.com/a-h/templ"
	templruntime "github.com/a-h/templ/runtime"
)

// ButtonVariant defines the style variant of the button
type ButtonVariant string

const (
	// Primary is the main call-to-action button
	VariantPrimary ButtonVariant = "primary"
	// Secondary is for alternative actions
	VariantSecondary ButtonVariant = "secondary"
	// Danger is for destructive actions
	VariantDanger ButtonVariant = "danger"
	// Success is for confirmation actions
	VariantSuccess ButtonVariant = "success"
	// Outline is for tertiary actions
	VariantOutline ButtonVariant = "outline"
)

// ButtonSize defines the size of the button
type ButtonSize string

const (
	// Small button
	SizeSmall ButtonSize = "small"
	// Medium button (default)
	SizeMedium ButtonSize = "medium"
	// Large button
	SizeLarge ButtonSize = "large"
)

// ButtonState defines the interactive state
type ButtonState string

const (
	// Normal state
	StateNormal ButtonState = "normal"
	// Loading state (show spinner, disable interactions)
	StateLoading ButtonState = "loading"
	// Disabled state
	StateDisabled ButtonState = "disabled"
)

// ButtonProps defines button configuration
type ButtonProps struct {
	Label     string            // Button text
	Variant   ButtonVariant     // Color variant
	Size      ButtonSize        // Button size
	State     ButtonState       // Interactive state
	Type      string            // HTML type (button, submit, reset)
	ID        string            // HTML id attribute
	Class     string            // Additional CSS classes
	Disabled  bool              // Is button disabled
	Loading   bool              // Show loading state
	FullWidth bool              // Stretch to full width
	Icon      string            // Icon class/name
	AriaLabel string            // Accessibility label
	OnClick   string            // HTMX click handler
	HTMX      map[string]string // HTMX attributes
}

// Button renders a styled button component
func Button(props ButtonProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = buttonWithState(props, determineState(props)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// buttonWithState handles the button rendering with state logic
func buttonWithState(props ButtonProps, state ButtonState) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var3 = []any{buttonClass(props, state)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var3...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<button type=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(props.Type)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/ui/components/button/button.templ`, Line: 69, Col: 19}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(props.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/ui/components/button/button.templ`, Line: 70, Col: 15}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var3).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/ui/components/button/button.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.Disabled || state == StateLoading {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " aria-label=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(props.AriaLabel)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/ui/components/button/button.templ`, Line: 73, Col: 30}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if state == StateLoading {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<span class=\"btn-spinner\"></span> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if props.Icon != "" {
			var templ_7745c5c3_Var8 = []any{"btn-icon", props.Icon}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var8...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<span class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var8).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/ui/components/button/button.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\"></span> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<span class=\"btn-label\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(props.Label)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/ui/components/button/button.templ`, Line: 81, Col: 39}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</span></button>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// determineState calculates the final button state
func determineState(props ButtonProps) ButtonState {
	// Loading takes precedence
	if props.Loading {
		return StateLoading
	}
	if props.Disabled {
		return StateDisabled
	}
	// If state is not set, default to normal
	if props.State == "" {
		return StateNormal
	}
	return props.State
}

// buttonClass generates the class string for a button
func buttonClass(props ButtonProps, state ButtonState) string {
	classes := "devsmith-btn btn-" + string(props.Variant) + " btn-" + string(props.Size) + " btn-" + string(state)
	if props.FullWidth {
		classes += " btn-full-width"
	}
	if props.Class != "" {
		classes += " " + props.Class
	}
	return classes
}

// ButtonStyles returns the CSS for button components
func ButtonStyles() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var11 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var11 == nil {
			templ_7745c5c3_Var11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<style>\n\t\t:root {\n\t\t\t/* Button sizing */\n\t\t\t--btn-height-small: 28px;\n\t\t\t--btn-height-medium: 36px;\n\t\t\t--btn-height-large: 44px;\n\t\t\t\n\t\t\t/* Padding */\n\t\t\t--btn-padding-small: 4px 12px;\n\t\t\t--btn-padding-medium: 8px 16px;\n\t\t\t--btn-padding-large: 12px 20px;\n\t\t\t\n\t\t\t/* Font sizes */\n\t\t\t--btn-font-small: 0.8125rem;\n\t\t\t--btn-font-medium: 0.875rem;\n\t\t\t--btn-font-large: 1rem;\n\t\t\t\n\t\t\t/* Colors */\n\t\t\t--btn-primary-bg: #007AFF;\n\t\t\t--btn-primary-hover: #0051D5;\n\t\t\t--btn-primary-active: #003DA3;\n\t\t\t--btn-primary-text: #FFFFFF;\n\t\t\t\n\t\t\t--btn-secondary-bg: #F5F5F7;\n\t\t\t--btn-secondary-hover: #ECECF1;\n\t\t\t--btn-secondary-active: #D2D2D7;\n\t\t\t--btn-secondary-text: #1D1D1F;\n\t\t\t\n\t\t\t--btn-danger-bg: #FF3B30;\n\t\t\t--btn-danger-hover: #E92D23;\n\t\t\t--btn-danger-active: #CC251B;\n\t\t\t--btn-danger-text: #FFFFFF;\n\t\t\t\n\t\t\t--btn-success-bg: #34C759;\n\t\t\t--btn-success-hover: #2AA745;\n\t\t\t--btn-success-active: #238C3A;\n\t\t\t--btn-success-text: #FFFFFF;\n\t\t\t\n\t\t\t--btn-outline-border: #D2D2D7;\n\t\t\t--btn-outline-text: #1D1D1F;\n\t\t\t\n\t\t\t--btn-disabled-bg: #F5F5F7;\n\t\t\t--btn-disabled-text: #A1A1A6;\n\t\t}\n\n\t\thtml[data-theme=\"dark\"] {\n\t\t\t--btn-secondary-bg: #2C2C2E;\n\t\t\t--btn-secondary-hover: #424245;\n\t\t\t--btn-secondary-active: #555558;\n\t\t\t--btn-secondary-text: #F5F5F7;\n\t\t\t\n\t\t\t--btn-outline-border: #424245;\n\t\t\t--btn-outline-text: #F5F5F7;\n\t\t\t\n\t\t\t--btn-disabled-bg: #2C2C2E;\n\t\t\t--btn-disabled-text: #8E8E93;\n\t\t}\n\n\t\t.devsmith-btn {\n\t\t\t/* Layout */\n\t\t\tdisplay: inline-flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tgap: 6px;\n\t\t\tborder: none;\n\t\t\tborder-radius: 6px;\n\t\t\tcursor: pointer;\n\t\t\tfont-weight: 500;\n\t\t\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;\n\t\t\ttext-decoration: none;\n\t\t\twhite-space: nowrap;\n\t\t\tuser-select: none;\n\t\t\ttransition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);\n\t\t\tposition: relative;\n\t\t\toverflow: hidden;\n\t\t}\n\n\t\t/* Size variants */\n\t\t.btn-small {\n\t\t\theight: var(--btn-height-small);\n\t\t\tpadding: var(--btn-padding-small);\n\t\t\tfont-size: var(--btn-font-small);\n\t\t}\n\n\t\t.btn-medium {\n\t\t\theight: var(--btn-height-medium);\n\t\t\tpadding: var(--btn-padding-medium);\n\t\t\tfont-size: var(--btn-font-medium);\n\t\t}\n\n\t\t.btn-large {\n\t\t\theight: var(--btn-height-large);\n\t\t\tpadding: var(--btn-padding-large);\n\t\t\tfont-size: var(--btn-font-large);\n\t\t}\n\n\t\t/* Color variants */\n\t\t.btn-primary {\n\t\t\tbackground-color: var(--btn-primary-bg);\n\t\t\tcolor: var(--btn-primary-text);\n\t\t\tbox-shadow: 0 1px 3px rgba(0, 122, 255, 0.3);\n\t\t}\n\n\t\t.btn-primary:hover:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: var(--btn-primary-hover);\n\t\t\tbox-shadow: 0 2px 8px rgba(0, 122, 255, 0.4);\n\t\t\ttransform: translateY(-1px);\n\t\t}\n\n\t\t.btn-primary:active:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: var(--btn-primary-active);\n\t\t\ttransform: translateY(0);\n\t\t}\n\n\t\t.btn-secondary {\n\t\t\tbackground-color: var(--btn-secondary-bg);\n\t\t\tcolor: var(--btn-secondary-text);\n\t\t\tborder: 1px solid transparent;\n\t\t}\n\n\t\t.btn-secondary:hover:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: var(--btn-secondary-hover);\n\t\t}\n\n\t\t.btn-secondary:active:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: var(--btn-secondary-active);\n\t\t}\n\n\t\t.btn-danger {\n\t\t\tbackground-color: var(--btn-danger-bg);\n\t\t\tcolor: var(--btn-danger-text);\n\t\t\tbox-shadow: 0 1px 3px rgba(255, 59, 48, 0.3);\n\t\t}\n\n\t\t.btn-danger:hover:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: var(--btn-danger-hover);\n\t\t\tbox-shadow: 0 2px 8px rgba(255, 59, 48, 0.4);\n\t\t\ttransform: translateY(-1px);\n\t\t}\n\n\t\t.btn-danger:active:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: var(--btn-danger-active);\n\t\t\ttransform: translateY(0);\n\t\t}\n\n\t\t.btn-success {\n\t\t\tbackground-color: var(--btn-success-bg);\n\t\t\tcolor: var(--btn-success-text);\n\t\t\tbox-shadow: 0 1px 3px rgba(52, 199, 89, 0.3);\n\t\t}\n\n\t\t.btn-success:hover:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: var(--btn-success-hover);\n\t\t\tbox-shadow: 0 2px 8px rgba(52, 199, 89, 0.4);\n\t\t\ttransform: translateY(-1px);\n\t\t}\n\n\t\t.btn-success:active:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: var(--btn-success-active);\n\t\t\ttransform: translateY(0);\n\t\t}\n\n\t\t.btn-outline {\n\t\t\tbackground-color: transparent;\n\t\t\tcolor: var(--btn-outline-text);\n\t\t\tborder: 1px solid var(--btn-outline-border);\n\t\t}\n\n\t\t.btn-outline:hover:not(:disabled):not(.btn-loading) {\n\t\t\tbackground-color: rgba(0, 122, 255, 0.05);\n\t\t\tborder-color: var(--btn-primary-bg);\n\t\t}\n\n\t\t/* State variants */\n\t\t.btn-normal {\n\t\t\t/* Default state */\n\t\t}\n\n\t\t.btn-loading {\n\t\t\tpointer-events: none;\n\t\t\topacity: 0.8;\n\t\t}\n\n\t\t.btn-disabled {\n\t\t\tbackground-color: var(--btn-disabled-bg);\n\t\t\tcolor: var(--btn-disabled-text);\n\t\t\tcursor: not-allowed;\n\t\t\topacity: 0.6;\n\t\t}\n\n\t\t/* Full width */\n\t\t.btn-full-width {\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t/* Loading spinner */\n\t\t.btn-spinner {\n\t\t\tdisplay: inline-block;\n\t\t\twidth: 14px;\n\t\t\theight: 14px;\n\t\t\tborder: 2px solid rgba(255, 255, 255, 0.3);\n\t\t\tborder-top-color: rgba(255, 255, 255, 1);\n\t\t\tborder-radius: 50%;\n\t\t\tanimation: spin 600ms linear infinite;\n\t\t}\n\n\t\t.btn-secondary .btn-spinner,\n\t\t.btn-outline .btn-spinner {\n\t\t\tborder-color: rgba(0, 0, 0, 0.2);\n\t\t\tborder-top-color: rgba(0, 0, 0, 1);\n\t\t}\n\n\t\t@keyframes spin {\n\t\t\tto {\n\t\t\t\ttransform: rotate(360deg);\n\t\t\t}\n\t\t}\n\n\t\t/* Icon spacing */\n\t\t.btn-icon {\n\t\t\tdisplay: inline-flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t/* Focus state for accessibility */\n\t\t.devsmith-btn:focus-visible {\n\t\t\toutline: 2px solid var(--btn-primary-bg);\n\t\t\toutline-offset: 2px;\n\t\t}\n\n\t\thtml[data-theme=\"dark\"] .devsmith-btn:focus-visible {\n\t\t\toutline-color: #00C7E7;\n\t\t}\n\n\t\t/* Hover state for touch devices */\n\t\t@media (hover: none) {\n\t\t\t.devsmith-btn:hover {\n\t\t\t\ttransform: none;\n\t\t\t}\n\t\t}\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
