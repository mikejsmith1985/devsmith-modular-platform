package spinner

type SpinnerProps struct {
	Size     string // sm, md, lg
	Variant  string // primary, secondary, success, danger
	Text     string
	FullPage bool
}

templ Spinner(props SpinnerProps) {
	if props.FullPage {
		<div class="fixed inset-0 flex items-center justify-center bg-black/50 dark:bg-black/70 z-50">
			@spinnerContent(props)
		</div>
	} else {
		@spinnerContent(props)
	}
}

templ spinnerContent(props SpinnerProps) {
	<div class="flex flex-col items-center justify-center gap-3" role="status" aria-live="polite">
		<svg class={ spinnerSizeClass(props.Size) } fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"/>
			<path class={ spinnerColorClass(props.Variant) } fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
		</svg>
		if props.Text != "" {
			<p class="text-sm font-medium text-gray-700 dark:text-gray-300">{ props.Text }</p>
		} else {
			<p class="text-sm font-medium text-gray-700 dark:text-gray-300">Loading</p>
		}
	</div>
}

func spinnerSizeClass(size string) string {
	switch size {
	case "sm":
		return "h-4 w-4 text-blue-600 dark:text-blue-400"
	case "lg":
		return "h-12 w-12 text-blue-600 dark:text-blue-400"
	default: // md
		return "h-8 w-8 text-blue-600 dark:text-blue-400"
	}
}

func spinnerColorClass(variant string) string {
	switch variant {
	case "secondary":
		return "text-gray-600 dark:text-gray-400"
	case "success":
		return "text-green-600 dark:text-green-400"
	case "danger":
		return "text-red-600 dark:text-red-400"
	default: // primary
		return "text-blue-600 dark:text-blue-400"
	}
}
