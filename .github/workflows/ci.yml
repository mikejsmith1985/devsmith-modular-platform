name: CI

# Purpose: Lightweight safety net for things pre-commit hook can't catch
# Philosophy: Pre-commit is the quality gate, CI validates deployment artifacts

on:
  push:
    branches: [development, main]
  pull_request:
    branches: [development, main]

jobs:
  # Job 1: Verify code builds (catches --no-verify commits)
  build:
    name: Build Services
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service: [portal, review, logs, analytics]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build ${{ matrix.service }}
        run: |
          echo "Building ${{ matrix.service }} service..."

          # Check if service has any Go files (skip if TDD RED phase)
          if ! ls cmd/${{ matrix.service }}/*.go >/dev/null 2>&1; then
            echo "⚠️  No Go files in cmd/${{ matrix.service }} (TDD RED phase - OK to skip)"
            exit 0
          fi

          go build -v -o bin/${{ matrix.service }} ./cmd/${{ matrix.service }}
          echo "✓ Build successful"

      - name: Verify binary exists
        run: |
          # Skip verification if no Go files (TDD RED phase)
          if ! ls cmd/${{ matrix.service }}/*.go >/dev/null 2>&1; then
            echo "⚠️  Skipping binary verification (no Go files)"
            exit 0
          fi

          test -f bin/${{ matrix.service }}
          file bin/${{ matrix.service }}

  # Job 2: Validate Docker images build (can't easily do this in pre-commit)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service: [portal, review, logs, analytics]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if service has Go files
        id: check_files
        run: |
          if ls cmd/${{ matrix.service }}/*.go >/dev/null 2>&1; then
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_files=false" >> $GITHUB_OUTPUT
            echo "⚠️  No Go files in cmd/${{ matrix.service }} (TDD RED phase - skipping Docker build)"
          fi

      - name: Build ${{ matrix.service }} Docker image
        if: steps.check_files.outputs.has_files == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          push: false
          tags: devsmith-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Comprehensive lint pass (full repo scan for QA consistency)
  lint:
    name: Code Quality Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate context

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run golangci-lint - Full Repository Scan
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m --out-format=colored-line-number
          skip-pkg-cache: false
          skip-build-cache: false

      - name: Verify Build After Linting
        run: |
          echo "Verifying all packages build clean..."
          go build ./cmd/...
          go build ./internal/...
          go build ./apps/...

  # Job 4: End-to-End tests (validates full user flows and routing)
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: always() && (needs.build.result == 'success' && needs.docker.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: |
          # Ensure playwright is in node_modules, then install browsers
          npm list @playwright/test || npm install @playwright/test
          npx playwright install --with-deps

      - name: Start services with docker-compose
        run: |
          docker-compose up -d
          echo "Waiting for services to be healthy..."

      - name: Wait for services to be ready
        run: |
          MAX_ATTEMPTS=120
          ATTEMPT=0
          
          echo "Waiting for services to be ready (up to 240 seconds)..."
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            # Use curl to check health endpoint - simplest and most reliable
            # -f: fail on HTTP errors
            # -s: silent mode
            # -m 5: 5 second timeout
            # -o /dev/null: discard response body
            if curl -f -s -m 5 http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Services are healthy"
              exit 0
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            if [ $((ATTEMPT % 20)) -eq 0 ]; then
              echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Still waiting for services..."
            fi
            sleep 2
          done
          
          echo "❌ Services failed to become healthy after 240 seconds"
          echo "Debug: Docker containers"
          docker ps -a
          echo ""
          echo "Debug: Docker-compose logs (last 100 lines)"
          docker-compose logs 2>&1 | tail -100
          exit 1

      - name: Run Playwright E2E tests
        run: |
          # Verify test file exists
          if [ ! -f tests/e2e/full_user_flow.spec.ts ]; then
            echo "❌ Test file not found!"
            ls -la tests/e2e/
            exit 1
          fi
          
          echo "Running E2E tests..."
          npx playwright test tests/e2e/full_user_flow.spec.ts --reporter=line
        timeout-minutes: 15

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Stop services
        if: always()
        run: docker-compose down

  # Summary job (optional, useful for branch protection rules)
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [build, docker, lint]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "Build: ${{ needs.build.result }}"
          echo "Docker: ${{ needs.docker.result }}"
          echo "Lint: ${{ needs.lint.result }}"

          if [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.docker.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ CI checks failed"
            exit 1
          fi
          
          echo "✅ All CI checks passed"
