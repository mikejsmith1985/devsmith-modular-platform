name: Test and Build

on:
  push:
    branches: [development, main]
  pull_request:
    branches: [development, main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: devsmith_test
          POSTGRES_USER: devsmith
          POSTGRES_PASSWORD: devsmith
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Initialize database
        env:
          PGPASSWORD: devsmith
        run: |
          psql -h localhost -U devsmith -d devsmith_test -f docker/postgres/init-schemas.sql

      - name: Run tests
        env:
          DATABASE_URL: postgres://devsmith:devsmith@localhost:5432/devsmith_test?sslmode=disable
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Display coverage
        run: |
          go tool cover -func=coverage.out | grep total:

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-devsmith
        continue-on-error: true

  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        service: [portal, review, logs, analytics]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Check for misplaced code in main.go
        run: |
          echo "Checking for code outside functions in cmd/${{ matrix.service }}/main.go..."
          if [ -f "cmd/${{ matrix.service }}/main.go" ]; then
            # Check for common patterns of misplaced code
            if grep -Hn "^\s*fmt\." "cmd/${{ matrix.service }}/main.go" | grep -v "^[^:]*:[0-9]*:\s*//" | grep -v "import" | grep -q .; then
              echo "❌ Found code outside function in main.go"
              grep -Hn "^\s*fmt\." "cmd/${{ matrix.service }}/main.go" | grep -v "^[^:]*:[0-9]*:\s*//"
              exit 1
            fi
          fi
          echo "✓ No misplaced code detected"

      - name: Build ${{ matrix.service }}
        run: |
          echo "Building ${{ matrix.service }} service..."
          go build -v -o bin/${{ matrix.service }} ./cmd/${{ matrix.service }} 2>&1 | tee build.log
          echo "✓ Build successful"

      - name: Verify binary
        run: |
          test -f bin/${{ matrix.service }}
          file bin/${{ matrix.service }}
          echo "✓ Binary verified"

      - name: Check for unused code in service
        run: |
          echo "Checking for unused code in cmd/${{ matrix.service }}..."
          go run golang.org/x/tools/cmd/goimports@latest -l cmd/${{ matrix.service }}/ || true
          echo "✓ Import check complete"

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        service: [portal, review, logs, analytics]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          push: false
          tags: devsmith-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, build, docker-build, lint]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Docker: ${{ needs.docker-build.result }}"
          echo "Lint: ${{ needs.lint.result }}"

          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.docker-build.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ CI failed"
            exit 1
          fi

          echo "✅ All CI checks passed"
