name: Link PR to Issue and Validate

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - development
      - main

jobs:
  link-and-validate:
    name: Link PR to Issue & Validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract issue number from PR body
        id: issue
        run: |
          # Try to find "Closes #123" or "#123" in PR body
          ISSUE_NUM=$(echo "${{ github.event.pull_request.body }}" | grep -oE '(Closes #|Fixes #|#)([0-9]+)' | grep -oE '[0-9]+' | head -1)
          
          if [ -z "$ISSUE_NUM" ]; then
            echo "issue_found=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No issue number found in PR body (format: 'Closes #123')"
            exit 0
          fi
          
          echo "issue_found=true" >> $GITHUB_OUTPUT
          echo "issue_num=$ISSUE_NUM" >> $GITHUB_OUTPUT
          echo "Found issue: #$ISSUE_NUM"

      - name: Validate issue exists
        if: steps.issue.outputs.issue_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNum = ${{ steps.issue.outputs.issue_num }};
            try {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNum
              });
              console.log(`‚úÖ Issue #${issueNum} exists: ${issue.data.title}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è Issue #${issueNum} not found`);
            }

      - name: Add helpful comment with workflow instructions
        if: steps.issue.outputs.issue_found == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `‚ö†Ô∏è **No issue linked to this PR**\n\n` +
                    `Please update the PR description to reference an issue:\n\n` +
                    `\`\`\`\n` +
                    `Closes #123\n` +
                    `\`\`\`\n\n` +
                    `**Why?** This ensures:\n` +
                    `- Issue tracking is accurate\n` +
                    `- Issues auto-close when PR merges\n` +
                    `- Acceptance criteria can be validated\n\n` +
                    `See [Issue Workflow Standard](.github/workflows/README.md) for details.`
            });

      - name: Validate acceptance criteria format
        if: steps.issue.outputs.issue_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNum = ${{ steps.issue.outputs.issue_num }};
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNum
            });
            
            const body = issue.data.body || '';
            const hasAcceptance = body.includes('Acceptance Criteria') || 
                                 body.includes('acceptance criteria') ||
                                 body.includes('[x]');
            
            if (!hasAcceptance) {
              console.log(`‚ö†Ô∏è Issue #${issueNum} may not have acceptance criteria documented`);
            } else {
              console.log(`‚úÖ Issue #${issueNum} has acceptance criteria`);
            }

      - name: Extract metrics from PR
        id: metrics
        run: |
          BODY='${{ github.event.pull_request.body }}'
          
          # Look for coverage percentage
          COVERAGE=$(echo "$BODY" | grep -oE 'Coverage[:\s]*([0-9]+\.?[0-9]*)%' | grep -oE '[0-9]+\.?[0-9]*' | head -1 || true)
          if [ -z "$COVERAGE" ]; then COVERAGE="Not reported"; fi
          
          # Look for tests
          TESTS=$(echo "$BODY" | grep -oE '[0-9]+/[0-9]+ (tests?|passing)' | head -1 || true)
          if [ -z "$TESTS" ]; then TESTS="Not reported"; fi
          
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "tests=$TESTS" >> $GITHUB_OUTPUT

      - name: Add metrics comment if metrics found
        if: steps.issue.outputs.issue_found == 'true' && (steps.metrics.outputs.coverage != 'Not reported' || steps.metrics.outputs.tests != 'Not reported')
        uses: actions/github-script@v7
        with:
          script: |
            const issueNum = ${{ steps.issue.outputs.issue_num }};
            const coverage = '${{ steps.metrics.outputs.coverage }}';
            const tests = '${{ steps.metrics.outputs.tests }}';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNum,
              body: `üìä **PR Metrics** (from PR #${context.payload.pull_request.number})\n\n` +
                    `- **Coverage:** ${coverage}\n` +
                    `- **Tests:** ${tests}\n\n` +
                    `Linked PR: ${context.payload.pull_request.html_url}`
            });

      - name: Check PR description completeness
        if: steps.issue.outputs.issue_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            
            const checks = {
              'Issue reference': body.includes('Closes #') || body.includes('Fixes #'),
              'Implementation summary': body.includes('##') || body.length > 100,
              'Quality metrics': body.includes('Coverage') || body.includes('Tests') || body.includes('Quality'),
              'Acceptance criteria': body.includes('[x]') || body.includes('[X]')
            };
            
            const passed = Object.values(checks).filter(v => v).length;
            const total = Object.keys(checks).length;
            
            let comment = `## PR Quality Checklist\n\n`;
            for (const [check, result] of Object.entries(checks)) {
              comment += `${result ? '‚úÖ' : '‚ö†Ô∏è'} ${check}\n`;
            }
            comment += `\n**Score:** ${passed}/${total} completeness items found\n`;
            
            if (passed < total) {
              comment += `\n**Recommendations:**\n`;
              for (const [check, result] of Object.entries(checks)) {
                if (!result) {
                  comment += `- Add: ${check}\n`;
                }
              }
            }
            
            console.log(comment);

      - name: Ensure auto-close on merge
        if: steps.issue.outputs.issue_found == 'true'
        run: |
          ISSUE_NUM=${{ steps.issue.outputs.issue_num }}
          PR_BODY='${{ github.event.pull_request.body }}'
          
          # Check if issue is already referenced with "Closes"
          if echo "$PR_BODY" | grep -q "Closes #$ISSUE_NUM"; then
            echo "‚úÖ PR will auto-close issue #$ISSUE_NUM on merge"
          else
            echo "‚ö†Ô∏è PR should reference 'Closes #$ISSUE_NUM' to auto-close"
          fi

  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: link-and-validate
    if: always()

    steps:
      - name: Report validation status
        run: |
          echo "‚úÖ PR validation complete"
          echo "If linked to issue: Issue will auto-close on merge"
          echo "Otherwise: PR will remain open for manual issue closure"
