name: Pull Request Checks

on:
  pull_request:
    branches:
      - development
      - main
    types: [opened, synchronize, reopened, edited]

jobs:
  # Job 1: Validate PR Format
  validate-pr:
    name: Validate PR Format
    runs-on: ubuntu-latest
    steps:
      - name: Check PR title follows Conventional Commits
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            test
            chore
          scopes: |
            auth
            portal
            review
            logs
            analytics
            build
          requireScope: false

      - name: Check PR links to an issue
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Check for "Closes #XX" or "Fixes #XX"
            const issueRegex = /(closes|fixes|resolves)\s+#\d+/i;

            if (!issueRegex.test(body)) {
              core.setFailed('PR must link to an issue with "Closes #XX" or "Fixes #XX"');
            }

      - name: Check branch name format
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.payload.pull_request.head.ref;
            const validPattern = /^(feature|fix|break-fix)\/\d+-[a-z0-9-]+$/;

            if (!validPattern.test(branch)) {
              core.setFailed(
                `Branch name "${branch}" must follow format: feature/{issue-number}-description\n` +
                `Example: feature/42-github-oauth-login`
              );
            }

      - name: Verify acceptance criteria present
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Check for "Acceptance Criteria" heading
            if (!body.includes('Acceptance Criteria')) {
              core.setFailed('PR description must include "Acceptance Criteria" section');
            }

            // Check for at least one checkbox
            const checkboxRegex = /- \[[x ]\]/g;
            const checkboxes = body.match(checkboxRegex);

            if (!checkboxes || checkboxes.length === 0) {
              core.setFailed('PR must list acceptance criteria as checkboxes: - [ ] criterion');
            }

      - name: Verify all acceptance criteria checked
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Find acceptance criteria section
            const criteriaRegex = /Acceptance Criteria[\s\S]*?(?=##|$)/i;
            const criteriaSection = body.match(criteriaRegex);

            if (!criteriaSection) {
              core.setFailed('Could not find Acceptance Criteria section');
              return;
            }

            // Count checked and unchecked boxes in that section
            const uncheckedRegex = /- \[ \]/g;
            const unchecked = criteriaSection[0].match(uncheckedRegex);

            if (unchecked && unchecked.length > 0) {
              core.setFailed(
                `Found ${unchecked.length} unchecked acceptance criteria.\n` +
                `ALL criteria must be met before PR can be approved.`
              );
            }

      - name: Check changelog updated
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const changelogUpdated = files.some(file =>
              file.filename === 'AI_CHANGELOG.md' ||
              file.filename === 'CLAUDE_CHANGELOG.md'
            );

            if (!changelogUpdated) {
              core.setFailed('AI_CHANGELOG.md must be updated in this PR');
            }

  # Job 2: Frontend Tests
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [platform-frontend, review-frontend, logs-frontend, analytics-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/${{ matrix.app }}/package-lock.json

      - name: Check if app exists
        id: check-app
        run: |
          if [ -d "apps/${{ matrix.app }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-app.outputs.exists == 'true'
        working-directory: apps/${{ matrix.app }}
        run: npm ci

      - name: Run linting
        if: steps.check-app.outputs.exists == 'true'
        working-directory: apps/${{ matrix.app }}
        run: npm run lint || echo "No lint script, skipping"

      - name: Run tests
        if: steps.check-app.outputs.exists == 'true'
        working-directory: apps/${{ matrix.app }}
        run: npm test -- --coverage

      - name: Check coverage threshold
        if: steps.check-app.outputs.exists == 'true'
        working-directory: apps/${{ matrix.app }}
        run: |
          # Extract coverage percentage from output
          COVERAGE=$(npm test -- --coverage --coverageReporters=text-summary 2>&1 | grep "Lines" | awk '{print $3}' | sed 's/%//')

          if [ -n "$COVERAGE" ]; then
            echo "Coverage: $COVERAGE%"
            if [ $(echo "$COVERAGE < 70" | bc) -eq 1 ]; then
              echo "❌ Coverage $COVERAGE% is below 70% threshold"
              exit 1
            else
              echo "✅ Coverage $COVERAGE% meets 70% threshold"
            fi
          else
            echo "⚠️ Could not determine coverage"
          fi

  # Job 3: Backend Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [platform-backend, review-backend, logs-backend, analytics-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check if app exists
        id: check-app
        run: |
          if [ -d "apps/${{ matrix.app }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-app.outputs.exists == 'true'
        working-directory: apps/${{ matrix.app }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        if: steps.check-app.outputs.exists == 'true'
        working-directory: apps/${{ matrix.app }}
        run: |
          pytest --cov=. --cov-report=term --cov-report=xml --cov-fail-under=70

  # Job 4: Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Scan for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: Scan for hardcoded URLs and ports
        run: |
          echo "Scanning for hardcoded URLs..."

          # Scan for localhost URLs (excluding test files and docs)
          HARDCODED=$(grep -r "localhost:[0-9]" \
            --include="*.js" \
            --include="*.jsx" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.py" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=dist \
            --exclude-dir=build \
            --exclude="*.test.*" \
            --exclude="*.spec.*" \
            --exclude="*.md" \
            . || true)

          if [ -n "$HARDCODED" ]; then
            echo "❌ Found hardcoded URLs:"
            echo "$HARDCODED"
            echo ""
            echo "All URLs must use environment variables!"
            echo "See ARCHITECTURE.md Section 13 - Configuration Management"
            exit 1
          else
            echo "✅ No hardcoded URLs found"
          fi

      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const additions = pr.additions;
            const deletions = pr.deletions;
            const changes = additions + deletions;

            // Warn if PR is very large (potential scope creep)
            if (changes > 1000) {
              core.warning(
                `This PR has ${changes} line changes. ` +
                `Consider splitting into smaller PRs (one feature per PR).`
              );
            }

            // Fail if PR is massive
            if (changes > 2000) {
              core.setFailed(
                `This PR has ${changes} line changes, which is too large. ` +
                `Please split into multiple smaller PRs (one feature per PR).`
              );
            }

  # Job 5: Docker Build Check
  docker-build:
    name: Docker Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - platform-backend
          - platform-frontend
          - review-backend
          - review-frontend
          - logs-backend
          - logs-frontend
          - analytics-backend
          - analytics-frontend
    steps:
      - uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        id: check-dockerfile
        run: |
          if [ -f "apps/${{ matrix.service }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: apps/${{ matrix.service }}
          push: false
          tags: devsmith/${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Summary Job: All checks must pass
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [validate-pr, test-frontend, test-backend, code-quality, docker-build, security-scan]
    if: always()
    steps:
      - name: Check all jobs succeeded
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            const failures = Object.entries(needs)
              .filter(([name, job]) => job.result !== 'success')
              .map(([name]) => name);

            if (failures.length > 0) {
              core.setFailed(
                `The following checks failed: ${failures.join(', ')}\n\n` +
                `All checks must pass before PR can be approved.`
              );
            } else {
              core.info('✅ All automated checks passed!');
            }
