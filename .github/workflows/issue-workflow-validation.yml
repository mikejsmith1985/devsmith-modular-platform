name: Validate Issue Workflow Standards

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]
    branches:
      - development
      - main

jobs:
  validate-issue-standards:
    name: Validate Issue Standards
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    permissions:
      issues: write
      pull-requests: read

    steps:
      - name: Check issue has required sections
        id: validation
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';
            
            const checks = {
              'Title prefix': /^\[.*\]/.test(issue.title),
              'Description': body.length > 50,
              'Acceptance Criteria': body.includes('Acceptance Criteria') || body.includes('acceptance criteria'),
              'Test Requirements': body.includes('Test') || body.includes('test'),
              'Coverage Target': body.includes('coverage') || body.includes('Coverage')
            };
            
            const passed = Object.values(checks).filter(v => v).length;
            const total = Object.keys(checks).length;
            
            let report = `## Issue Workflow Validation\n\n`;
            let allPassed = true;
            
            for (const [check, result] of Object.entries(checks)) {
              const icon = result ? '✅' : '⚠️';
              report += `${icon} ${check}\n`;
              if (!result) allPassed = false;
            }
            
            report += `\n**Completeness:** ${passed}/${total}`;
            
            if (!allPassed) {
              report += `\n\n### Recommendations:\n`;
              if (!checks['Title prefix']) {
                report += `- Add service prefix to title: \`[Service]\`\n`;
              }
              if (!checks['Acceptance Criteria']) {
                report += `- Add ## Acceptance Criteria section\n`;
              }
              if (!checks['Test Requirements']) {
                report += `- Add test requirements and coverage target\n`;
              }
            }
            
            core.setOutput('report', report);
            core.setOutput('passed', allPassed);

      - name: Post validation comment
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.validation.outputs.report }}`;
            const passed = '${{ steps.validation.outputs.passed }}' === 'true';
            
            if (!passed) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report + `\n\nSee [Issue Workflow Standard](.docs/ISSUE_WORKFLOW_STANDARD.md) for full requirements.`
              });
            }

  validate-pr-completeness:
    name: Validate PR Completeness
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write

    steps:
      - name: Check PR requirements
        id: pr_check
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            
            const checks = {
              'Issue linked': body.includes('Closes #') || body.includes('Fixes #'),
              'Implementation section': body.includes('## Implementation') || body.includes('## Changes'),
              'Test section': body.includes('## Test') || body.includes('## Tests'),
              'Quality section': body.includes('## Quality') || body.includes('✅'),
              'Acceptance criteria': body.includes('[x]') || body.includes('[X]')
            };
            
            const passed = Object.values(checks).filter(v => v).length;
            const total = Object.keys(checks).length;
            
            core.setOutput('passed', passed);
            core.setOutput('total', total);
            core.setOutput('issue_linked', checks['Issue linked']);

      - name: Require issue link
        if: steps.pr_check.outputs.issue_linked == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed(
              'PR must reference an issue with "Closes #NUMBER" in the description. ' +
              'This enables issue tracking and auto-close functionality.'
            );

      - name: Post helpful PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const passed = parseInt('${{ steps.pr_check.outputs.passed }}');
            const total = parseInt('${{ steps.pr_check.outputs.total }}');
            
            if (passed < total) {
              const pr = context.payload.pull_request;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `📋 **PR Completeness: ${passed}/${total}**\n\n` +
                      `Your PR is missing some standard sections. Consider adding:\n` +
                      `- Issue reference: \`Closes #NUMBER\`\n` +
                      `- ## Implementation section\n` +
                      `- ## Test Results section\n` +
                      `- ## Quality section with ✅ checkmarks\n` +
                      `- Acceptance criteria checklist\n\n` +
                      `See [PR Description Template](.docs/ISSUE_WORKFLOW_STANDARD.md#pr-description-template) for details.`
              });
            }

  enforce-issue-closure:
    name: Enforce Issue Closure on PR Merge
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    permissions:
      issues: write
      pull-requests: read

    steps:
      - name: Extract and validate issue closure
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            
            // Find "Closes #NUMBER"
            const match = body.match(/(Closes|Fixes|Resolves)\s+#(\d+)/i);
            
            if (!match) {
              console.log('⚠️ No issue closure found in PR');
              return;
            }
            
            const issueNum = match[2];
            console.log(`✅ PR will close issue #${issueNum} on merge`);
            
            // Verify issue exists
            try {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNum
              });
              console.log(`✅ Issue #${issueNum} confirmed: "${issue.data.title}"`);
            } catch (error) {
              core.warning(`Issue #${issueNum} not found`);
            }
