#!/bin/bash
# DevSmith Pre-Push Validation Hook
# SELECTIVE MODE: Only validates files being pushed (HEAD~1..HEAD)
# This keeps local feedback fast while still catching NEW issues
# Do NOT bypass with --no-verify (use only when necessary for infrastructure changes)

set -euo pipefail

PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"

echo "🔍 Running pre-push validation (SELECTIVE MODE - current commit only)..."
echo ""

FAILED=0

# Get list of modified files in current commit (HEAD~1..HEAD)
# This ensures ALL checks below only validate files being pushed
MODIFIED_FILES=$(git diff --name-only HEAD~1..HEAD 2>/dev/null || echo "")
MODIFIED_GO_FILES=$(echo "$MODIFIED_FILES" | grep '\.go$' || true)

if [ -z "$MODIFIED_FILES" ]; then
    echo "ℹ️  No files modified in current commit. Skipping validation."
    exit 0
fi

echo "📋 Files being pushed:"
echo "$MODIFIED_FILES" | sed 's/^/   /'
echo ""

# 1. FORMAT CHECK (gofmt) - MODIFIED FILES ONLY
echo "1️⃣  Checking formatting (gofmt)..."
if [ -n "$MODIFIED_GO_FILES" ]; then
    UNFORMATTED=$(gofmt -l $MODIFIED_GO_FILES 2>/dev/null || true)
    if [ -n "$UNFORMATTED" ]; then
        echo "❌ FAILED: Files not formatted"
        echo "$UNFORMATTED" | sed 's/^/   /'
        FAILED=1
    else
        echo "✅ PASSED: Modified files formatted"
    fi
else
    echo "ℹ️  No Go files modified"
fi

# 2. IMPORTS CHECK (goimports) - MODIFIED FILES ONLY
echo "2️⃣  Checking imports (goimports)..."
if [ -n "$MODIFIED_GO_FILES" ]; then
    UNIMPORTED=$(goimports -l $MODIFIED_GO_FILES 2>/dev/null || true)
    if [ -n "$UNIMPORTED" ]; then
        echo "❌ FAILED: Imports not resolved"
        echo "$UNIMPORTED" | sed 's/^/   /'
        FAILED=1
    else
        echo "✅ PASSED: Imports correct"
    fi
else
    echo "ℹ️  No Go files modified"
fi

# 3. BUILD CHECK - MODIFIED PACKAGES ONLY
echo "3️⃣  Checking build..."
if [ -n "$MODIFIED_GO_FILES" ]; then
    MODIFIED_PACKAGES=$(echo "$MODIFIED_GO_FILES" | sed 's|/[^/]*\.go$||' | sort -u | sed 's|^|./|')
    if ! go build $MODIFIED_PACKAGES 2>&1; then
        echo "❌ FAILED: Modified packages don't compile"
        FAILED=1
    else
        echo "✅ PASSED: Modified packages compile"
    fi
else
    echo "ℹ️  No Go files modified"
fi

# 4. LINTING CHECK (golangci-lint) - MODIFIED FILES ONLY
echo "4️⃣  Checking linting (golangci-lint)..."
if ! command -v golangci-lint &>/dev/null; then
    echo "⚠️  WARNING: golangci-lint not installed"
else
    if [ -n "$MODIFIED_GO_FILES" ]; then
        LINT_OUTPUT=$(golangci-lint run $MODIFIED_GO_FILES 2>&1 || true)
        if echo "$LINT_OUTPUT" | grep -qE "^[^[:space:]].*\.go:[0-9]+"; then
            echo "❌ FAILED: Linting errors in modified files"
            echo "$LINT_OUTPUT" | head -20 | sed 's/^/   /'
            FAILED=1
        else
            echo "✅ PASSED: Modified files lint clean"
        fi
    else
        echo "ℹ️  No Go files modified"
    fi
fi

# 5. VET CHECK - MODIFIED PACKAGES ONLY
echo "5️⃣  Checking vet..."
if [ -n "$MODIFIED_GO_FILES" ]; then
    MODIFIED_PACKAGES=$(echo "$MODIFIED_GO_FILES" | sed 's|/[^/]*\.go$||' | sort -u | sed 's|^|./|')
    if ! go vet $MODIFIED_PACKAGES 2>&1; then
        echo "❌ FAILED: Go vet found issues"
        FAILED=1
    else
        echo "✅ PASSED: Go vet clean"
    fi
else
    echo "ℹ️  No Go files modified"
fi

# 6. TEST COMPILATION - MODIFIED PACKAGES ONLY
echo "6️⃣  Checking test compilation..."
if [ -n "$MODIFIED_GO_FILES" ]; then
    MODIFIED_PACKAGES=$(echo "$MODIFIED_GO_FILES" | sed 's|/[^/]*\.go$||' | sort -u | sed 's|^|./|')
    if ! go test $MODIFIED_PACKAGES -short 2>&1 >/dev/null; then
        echo "❌ FAILED: Tests don't compile for modified packages"
        FAILED=1
    else
        echo "✅ PASSED: Tests compile"
    fi
else
    echo "ℹ️  No Go files modified"
fi

# 7. TEST EXECUTION - MODIFIED PACKAGES ONLY
echo "7️⃣  Running tests (modified packages)..."
if [ -n "$MODIFIED_GO_FILES" ]; then
    MODIFIED_PACKAGES=$(echo "$MODIFIED_GO_FILES" | sed 's|/[^/]*\.go$||' | sort -u | sed 's|^|./|')
    if ! go test $MODIFIED_PACKAGES -short 2>&1 >/dev/null; then
        echo "⚠️  INFO: Tests failed (pre-existing or environment issue)"
        echo "   Running tests for quality feedback only - not blocking push"
    else
        echo "✅ PASSED: Tests passed"
    fi
else
    echo "ℹ️  No Go files modified"
fi

# 8. RACE CHECK - MODIFIED PACKAGES ONLY (INFORMATIONAL ONLY)
echo "8️⃣  Checking for race conditions..."
if [ -n "$MODIFIED_GO_FILES" ]; then
    MODIFIED_PACKAGES=$(echo "$MODIFIED_GO_FILES" | sed 's|/[^/]*\.go$||' | sort -u | sed 's|^|./|')
    if ! go test $MODIFIED_PACKAGES -race -short 2>&1 >/dev/null; then
        echo "⚠️  INFO: Race detection found issues (informational only)"
    else
        echo "✅ PASSED: No race conditions"
    fi
else
    echo "ℹ️  No Go files modified"
fi

echo ""
echo "════════════════════════════════════════════════════════════"

if [[ $FAILED -eq 0 ]]; then
    echo "✅ PRE-PUSH CHECKS PASSED"
    echo "════════════════════════════════════════════════════════════"
    exit 0
else
    echo "❌ PRE-PUSH CHECKS FAILED"
    echo "════════════════════════════════════════════════════════════"
    echo ""
    echo "Quick fixes:"
    echo "  1. Run: gofmt -w <files>"
    echo "  2. Run: goimports -w <files>"
    echo "  3. Fix build/lint errors in your code"
    echo "  4. Try push again"
    exit 1
fi
