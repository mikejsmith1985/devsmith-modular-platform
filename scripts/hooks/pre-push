#!/bin/bash
# DevSmith Pre-Push Validation Hook
# STRICT MODE: Blocks push if ANY check fails
# Do NOT bypass with --no-verify

set -euo pipefail

PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"

echo "🔍 Running pre-push validation checks..."
echo ""

FAILED=0

# 1. FORMAT CHECK (gofmt)
echo "1️⃣  Checking formatting (gofmt)..."
if gofmt -l . 2>/dev/null | grep -q "\.go"; then
    echo "❌ FAILED: Files not formatted. Run: gofmt -w ."
    FAILED=1
else
    echo "✅ PASSED: All files formatted"
fi

# 2. IMPORTS CHECK (goimports)
echo "2️⃣  Checking imports (goimports)..."
if goimports -l . 2>/dev/null | grep -q "\.go"; then
    echo "❌ FAILED: Imports not resolved. Run: goimports -w ."
    FAILED=1
else
    echo "✅ PASSED: Imports correct"
fi

# 3. BUILD CHECK
echo "3️⃣  Checking build (go build)..."
if ! go build ./... 2>&1; then
    echo "❌ FAILED: Code does not compile"
    FAILED=1
else
    echo "✅ PASSED: Code compiles"
fi

# 4. LINTING CHECK (golangci-lint) - STRICT
echo "4️⃣  Checking linting (golangci-lint)..."
if ! command -v golangci-lint &>/dev/null; then
    echo "⚠️  WARNING: golangci-lint not installed"
    echo "   Install: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
else
    # Capture output and check for ANY linting issues (errors or warnings)
    LINT_OUTPUT=$(golangci-lint run ./... 2>&1 || true)
    # Check if there's any output (which means issues found)
    if echo "$LINT_OUTPUT" | grep -qE "^[^[:space:]].*\.go:[0-9]+"; then
        echo "❌ FAILED: Linting errors/warnings found:"
        echo "$LINT_OUTPUT" | head -30
        FAILED=1
    else
        echo "✅ PASSED: No linting errors"
    fi
fi

# 5. VET CHECK
echo "5️⃣  Checking vet (go vet)..."
if ! go vet ./... 2>&1; then
    echo "❌ FAILED: Go vet found issues"
    FAILED=1
else
    echo "✅ PASSED: Go vet clean"
fi

# 6. TEST COMPILATION (BLOCKING)
echo "6️⃣  Checking test compilation..."
# Note: We skip explicit compilation since go test ./... -short compiles implicitly
# and avoids the "cannot write test binary" conflicts that arise from -c flag
if ! go test ./... -c -o /tmp/test.binary 2>&1 | grep -q "^"; then
    # Test succeeded, no output
    echo "✅ PASSED: Tests compile"
else
    # If go test -c has issues, fall back to running tests which implicitly compiles
    if ! go test ./... -short -run TestNothing 2>&1 >/dev/null; then
        echo "❌ FAILED: Tests don't compile. Fix package structure issues."
        FAILED=1
    else
        echo "✅ PASSED: Tests compile"
    fi
fi

# 7. TESTS RUN (BLOCKING)
echo "7️⃣  Running tests..."
if ! go test ./... -short 2>&1 >/dev/null; then
    echo "❌ FAILED: Tests failed"
    FAILED=1
else
    echo "✅ PASSED: All tests passed"
fi

# 8. RACE CONDITION CHECK (BLOCKING)
echo "8️⃣  Checking for race conditions..."
if ! go test ./... -race -short 2>&1 >/dev/null; then
    echo "❌ FAILED: Race conditions detected"
    FAILED=1
else
    echo "✅ PASSED: No race conditions"
fi

echo ""
echo "════════════════════════════════════════════════════════════"

if [[ $FAILED -eq 0 ]]; then
    echo "✅ ALL CHECKS PASSED - Push allowed"
    echo "════════════════════════════════════════════════════════════"
    exit 0
else
    echo "❌ PRE-PUSH VALIDATION FAILED"
    echo "════════════════════════════════════════════════════════════"
    echo ""
    echo "❌ CANNOT PUSH - Fix the issues above and try again"
    echo ""
    exit 1
fi
